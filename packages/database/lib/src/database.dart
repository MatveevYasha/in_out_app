import 'dart:io';

import 'package:core/core.dart';
import 'package:drift/drift.dart';
import 'package:drift/native.dart';
import 'package:path/path.dart' as path;
import 'package:path_provider/path_provider.dart';

part 'database.g.dart';

// @DataClassName('ExpensesDeal')
class DBExpensesDeal extends Table {
  IntColumn get id => integer().autoIncrement()();
  IntColumn get amount => integer()();
  DateTimeColumn get date => dateTime()();
  TextColumn get categoryName => text()();
}

// extension ExpensesDealTableMapper on ExpensesDeal {
//   ExpensesDeal toEntity() {
//     return ExpensesDeal(
//       amount: amount,
//       date: date,
//       incomeType: incomeType,
//     );
//   }
// }

// @DataClassName('IncomeDeal')
class DBIncomeDeal extends Table {
  IntColumn get id => integer().autoIncrement()();
  IntColumn get amount => integer()();
  DateTimeColumn get date => dateTime()();
  TextColumn get categoryName => text()();
}

// abstract class TodoCategoryItemCount extends View {
//   TodoItems get todoItems;
//   TodoCategories get todoCategories;

//   Expression<int> get itemCount => todoItems.id.count();

//   @override
//   Query as() => select([
//         todoCategories.name,
//         itemCount,
//       ]).from(todoCategories).join([innerJoin(todoItems, todoItems.categoryId.equalsExp(todoCategories.id))]);
// }

@DriftDatabase(tables: [
  DBExpensesDeal,
  DBIncomeDeal,
])
class Database extends _$Database {
  Database() : super(_openConnection());

  @override
  int get schemaVersion => 1;

  // @override
  // MigrationStrategy get migration => DatabaseMigrationStrategy(this);

  static LazyDatabase _openConnection() {
    return LazyDatabase(() async {
      final appFolder = await getApplicationDocumentsDirectory();
      final dbFile = File(path.join(appFolder.path, 'db.sqlite'));

      return NativeDatabase.createBackgroundConnection(dbFile);
    });
  }

  // Future<List<DBExpensesDeal>> getList() {
  //   final itemsQuery = select(dBExpensesDeal).watch();
  Future<int> addExpensesDeal(DBExpensesDealCompanion entry) {
    return into(dBExpensesDeal).insert(entry);
  }

  //   return itemsQuery.get();
  // }
  Future<List<ExpensesDeal>> getAllExpensesDealData() async {
    final query = select(dBExpensesDeal);
    // ..whereSamePrimaryKey()
    // ..where((tbl) => tbl.isDeleted.equals(false));

    return query.map((row) => row.toEntity()).get();
  }
}



// Future<int> add(DBExpensesDealCompanion entry) {
//   // return into(dbEx).insert(entry);
//   return select
// }

// Future<int> add(DBExpensesDeal entry) {
//   return into(employee).insert(entry);
// }
// class Database extends _$Database {
//   Database(super.e);

//   @override
//   int get schemaVersion => 1;

// @override
// MigrationStrategy get migration {
//   return MigrationStrategy(
//     onCreate: (m) async {
//       await m.createAll();

//       // Add a bunch of default items in a batch
//       await batch((b) {
//         b.insertAll(todoItems, [
//           TodoItemsCompanion.insert(title: 'A first entry', categoryId: 0),
//           TodoItemsCompanion.insert(
//             title: 'Todo: Checkout drift',
//             content: const Value('Drift is a persistence library for Dart '
//                 'and Flutter applications.'),
//             categoryId: 0,
//           ),
//         ]);
//       });
//     },
//   );
// }

// The TodoItem class has been generated by drift, based on the TodoItems
// table description.
//
// In drift, queries can be watched by using .watch() in the end.
// For more information on queries, see https://drift.simonbinder.eu/docs/getting-started/writing_queries/

// Stream<List<Deal>> get allItems => select(expensesDeal).watch();

  // Future<List<ExpensesDeal>> getDeal(int id) {
  //   final query = select(expensesDeal);
  //   // ..whereSamePrimaryKey()
  //   // ..where((tbl) => tbl.isDeleted.equals(false));

  //   return query.map((row) => row.toEntity()).get();
  // }
// }
